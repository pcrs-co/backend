# render.yaml

services:
  # 1. Redis for Celery Broker
  - type: redis
    name: redis-broker
    plan: free # Use a paid plan for production for higher reliability
    ipAllowList: []

  # 2. Django Web Service (API)
  - type: web
    name: backend-api
    env: python
    plan: free # Use a paid "Starter" plan for production
    # --- FIX: All secrets are now managed in one secure group ---
    envVarGroup: fyp-secrets
    buildCommand: |
      pip install -r requirements.txt
      python manage.py collectstatic --noinput
      python manage.py migrate
    startCommand: "gunicorn backend.wsgi:application"
    envVars:
      # This list now only contains non-secret, service-specific variables.
      - key: PYTHON_VERSION
        value: 3.12.3
      - key: ENVIRONMENT
        value: production
      # This links to the Redis service defined above
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString

  # 3. Celery Background Worker
  - type: worker
    name: celery-worker
    env: python
    plan: free
    # --- FIX: The worker also uses the same secure group for secrets ---
    envVarGroup: fyp-secrets
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery -A backend.celery worker -l info"
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.3
      - key: ENVIRONMENT
        value: production
      # --- FIX: We must explicitly sync the SECRET_KEY from the web service. ---
      # This is because the web service's key might be auto-generated by Render
      # and the worker needs the exact same one.
      - key: SECRET_KEY
        fromService:
          type: web
          name: backend-api
          envVarKey: SECRET_KEY
      # Links to the Redis service
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString